// const { expect } = require('chai');
// const { deployZeronaut } = require('./Zeronaut.test');
// const { createCampaign } = require('./Campaign.test');
// const { createLevel } = require('./Level.test');
// const { buildProof } = require('../utils/build-proof');

// describe('Play', () => {
//   let zeronaut;
//   let circuit;
//   let player, otherPlayer;

//   const campaignId = ethers.encodeBytes32String('dummy-campaign');
//   const levelId = ethers.encodeBytes32String('dummy-level');

//   before('bootstrap', async () => {
//     [player, otherPlayer] = await ethers.getSigners();
//     zeronaut = await deployZeronaut();
//     await createCampaign(zeronaut, campaignId);
//     level = await createLevel(zeronaut, campaignId, levelId);
//     circuit = JSON.parse(await level.circuit());
//   });

//   describe('before the level is solved', () => {
//     it('shows that the level is not solved', async () => {
//       const isSolved = await zeronaut.isLevelSolved(levelId, player.address);
//       expect(isSolved).to.be.false;
//     });
//   });

//   describe('when a valid proof is generated', function () {
//     let proof, publicInputs;

//     before('build proof', async function () {
//       ({ proof, publicInputs } = await buildProof(player, circuit, {
//         secret: 42,
//       }));
//     });

//     describe('and submitted by the signer that generated it', function () {
//       before('submit the proof', async function () {
//         await (await zeronaut.solveLevel(levelId, proof, publicInputs)).wait();
//       });

//       it('shows that the level is solved for that player', async function () {
//         const isSolved = await zeronaut.isLevelSolved(levelId, player.address);
//         expect(isSolved).to.be.true;
//       });

//       it('shows that the level is not solved for other players', async function () {
//         const isSolved = await zeronaut.isLevelSolved(
//           levelId,
//           otherPlayer.address
//         );
//         expect(isSolved).to.be.false;
//       });
//     });

//     describe('and submitted by a different signer', function () {
//       it('reverts', async function () {
//         const otherSigner = (await hre.ethers.getSigners())[1];
//         expect(
//           zeronaut.connect(otherSigner).solveLevel(levelId, proof, publicInputs)
//         ).to.be.revertedWith('Proof must be generated by player');
//       });
//     });
//   });
// });
